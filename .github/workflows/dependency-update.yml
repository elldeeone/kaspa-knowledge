name: Automated Dependency Updates

on:
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  update-python-dependencies:
    name: Update Python Dependencies
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install pip-tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
        
    - name: Update Python dependencies
      run: |
        # Create requirements.in from current requirements.txt if it doesn't exist
        if [ ! -f requirements.in ]; then
          cp requirements.txt requirements.in
        fi
        
        # Update dependencies
        pip-compile --upgrade requirements.in
        
    - name: Check for Python security vulnerabilities
      run: |
        pip install safety
        safety check -r requirements.txt --json > safety-report.json || true
        
    - name: Create Pull Request for Python updates
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update Python dependencies"
        title: "ðŸ”„ Update Python Dependencies"
        body: |
          This PR updates Python dependencies to their latest versions.
          
          ### Changes
          - Updated dependencies in `requirements.txt`
          - Security scan results attached
          
          ### Security Report
          Check the safety-report.json file for any security vulnerabilities.
          
          Auto-generated by GitHub Actions ðŸ¤–
        branch: update/python-dependencies
        delete-branch: true

  security-audit:
    name: Weekly Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
        
    - name: Run Python security scan
      run: |
        echo "## Python Security Report" > security-report.md
        echo "" >> security-report.md
        
        echo "### Safety Check (Dependencies)" >> security-report.md
        safety check --json | jq -r '.vulnerabilities[] | "- **\(.package_name)** (\(.installed_version)): \(.advisory)"' >> security-report.md || echo "No vulnerabilities found" >> security-report.md
        echo "" >> security-report.md
        
        echo "### Bandit Check (Code Analysis)" >> security-report.md
        bandit -r scripts/ -f json | jq -r '.results[] | "- **\(.filename)**: \(.issue_text) (Severity: \(.issue_severity))"' >> security-report.md || echo "No issues found" >> security-report.md
        
    - name: Create security issue if vulnerabilities found
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          
          // Check if there are actual vulnerabilities (not just "No vulnerabilities found")
          if (report.includes('Severity:') || report.includes('installed_version')) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš¨ Security Vulnerabilities Detected - ${new Date().toISOString().split('T')[0]}`,
              body: `Weekly security scan has detected potential vulnerabilities:\n\n${report}\n\n**Action Required:** Please review and address these security issues.`,
              labels: ['security', 'priority-high']
            });
          }

  cleanup-old-branches:
    name: Cleanup Old Update Branches
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Delete old update branches
      run: |
        # Delete merged update branches older than 7 days
        git for-each-ref --format='%(refname:short) %(committerdate)' refs/remotes/origin/update/ | 
        while read branch date; do
          if [[ $(date -d "$date" +%s) -lt $(date -d '7 days ago' +%s) ]]; then
            branch_name=${branch#origin/}
            echo "Deleting old branch: $branch_name"
            git push origin --delete $branch_name || echo "Branch $branch_name already deleted"
          fi
        done 